# This workflow runs test

name: tests

on:
  pull_request:
    branches:
      - "main"
      - "develop"
  push:
    branches:
      - "main"
      - "develop"

jobs:
  test-minimal:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        py-version:
          - 3.x

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}

      - name: Set up Python ${{ matrix.py-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.py-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest

      - name: Install via pip
        run: |
          pip install -e .

      - name: Run serial tests
        run: |
          pytest test/serial

  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        py-version:
          - 3.7
          - 3.8
          - 3.x
        mpi:
          - openmpi
        os:
          - ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}

      - name: Set up Python ${{ matrix.py-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.py-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install lyncs_setuptools

      - name: Install OpenMPI Parallel HDF5
        run: bash .bash/install-hdf5.sh

      - name: Install h5py
        run: |
          CC=mpicc HDF5_MPI="ON" HDF5_DIR="${LIO_HDF5_PATH}" pip install --no-binary=h5py h5py

      - name: Install via pip
        run: |
          pip install -e .[all]

      - name: Run serial tests
        run: |
          coverage run --rcfile=setup.cfg -m pytest test/serial

      - name: Run MPI tests (procs=2, 4, 7)
        run: |
          PROCS=(2 4 7)
          for proc in "${PROCS[@]}"
          do
            echo "::group::Run MPI tests (procs=$proc)"
            mpirun -n $proc --oversubscribe coverage run --rcfile=setup.cfg -m pytest test/MPI --with-mpi
            echo "::endgroup::"
          done

      - name: Run Dask tests
        run: |
          coverage run --rcfile=setup.cfg -m pytest test/Dask

      - name: Coverage report
        run: |
          coverage combine
          coverage report

      - name: Upload Coverage report
        if: ${{ matrix.py-version == '3.x' }}
        run: |
          coverage xml
          export CODECOV_TOKEN="${{ secrets.CODECOV_TOKEN }}"
          bash <(curl -s https://codecov.io/bash) -f ./coverage.xml -n $(lyncs_setuptools name)
